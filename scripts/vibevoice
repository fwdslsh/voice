#!/usr/bin/env bash
set -euo pipefail

# Handle --update argument
if [[ "${1:-}" == "--update" ]]; then
    echo "🔄 Updating VibeVoice..."
    
    # Update the wrapper script
    echo "⬇️  Downloading latest wrapper script..."
    SCRIPT_PATH="$(realpath "$0")"
    curl -fsSL https://raw.githubusercontent.com/fwdslsh/voice/main/scripts/vibevoice -o "$SCRIPT_PATH.tmp" || {
        echo "❌ Error: Failed to download wrapper script"
        exit 1
    }
    chmod +x "$SCRIPT_PATH.tmp"
    mv "$SCRIPT_PATH.tmp" "$SCRIPT_PATH"
    echo "✅ Wrapper script updated"
    
    # Update the Docker image
    echo "⬇️  Pulling latest Docker image..."
    docker pull fwdslsh/vibevoice:latest || {
        echo "❌ Error: Failed to pull Docker image"
        exit 1
    }
    echo "✅ Docker image updated"
    
    echo "🎉 Update completed successfully!"
    exit 0
fi

# Check if --output is specified
OUTFILE=""
for arg in "$@"; do
  if [[ "$arg" == --output ]]; then
    # Next argument is the file path
    shift_next=true
    continue
  fi
  if [[ "${shift_next:-false}" == "true" ]]; then
    OUTFILE="$arg"
    break
  fi
done

# Decide if GPU is available (Linux + NVIDIA)
GPU_FLAG=()
if command -v nvidia-smi >/dev/null 2>&1; then
  GPU_FLAG=(--gpus all)
fi

# Pick a host audio player in order of preference
pick_player() {
  for p in ffplay afplay aplay paplay play; do
    if command -v "$p" >/dev/null 2>&1; then
      echo "$p"
      return 0
    fi
  done
  echo ""
  return 1
}

# shared HF cache speeds up repeated runs
HF_CACHE="${HOME}/.cache/huggingface"
mkdir -p "$HF_CACHE"

# Handle --output case differently
if [[ -n "$OUTFILE" ]]; then
  # Mount the directory containing the output file
  OUTDIR="$(dirname "$(realpath "$OUTFILE")")"
  OUTNAME="$(basename "$OUTFILE")"
  
  # Update the --output argument to use the container path
  ARGS=()
  replace_next=false
  for arg in "$@"; do
    if [[ "$replace_next" == "true" ]]; then
      ARGS+=("/output/$OUTNAME")
      replace_next=false
    elif [[ "$arg" == "--output" ]]; then
      ARGS+=("$arg")
      replace_next=true
    else
      ARGS+=("$arg")
    fi
  done
  
  docker run "${GPU_FLAG[@]}" --rm -i \
    -v "$HF_CACHE":/root/.cache/huggingface \
    -v "$OUTDIR":/output \
    fwdslsh/vibevoice:latest "${ARGS[@]}"
  exit 0
fi

PLAYER="$(pick_player || true)"
if [[ -z "${PLAYER}" ]]; then
  echo "[note] No audio player found on host (ffplay/afplay/aplay/paplay/play). Outputting WAV to stdout."
fi

# run container and pipe output
if [[ -n "${PLAYER}" ]]; then
  case "$PLAYER" in
    ffplay)
      docker run "${GPU_FLAG[@]}" --rm -i \
        -v "$HF_CACHE":/root/.cache/huggingface \
        fwdslsh/vibevoice:latest "$@" | \
      ffplay -nodisp -autoexit - >/dev/null 2>&1 || true
      ;;
    afplay)
      # afplay needs a file, so we'll use a temp file
      TMPFILE="$(mktemp --suffix=.wav)"
      cleanup_tmp() { rm -f "$TMPFILE"; }
      trap cleanup_tmp EXIT
      
      docker run "${GPU_FLAG[@]}" --rm -i \
        -v "$HF_CACHE":/root/.cache/huggingface \
        fwdslsh/vibevoice:latest "$@" > "$TMPFILE"
      afplay "$TMPFILE" || true
      ;;
    aplay|paplay)
      docker run "${GPU_FLAG[@]}" --rm -i \
        -v "$HF_CACHE":/root/.cache/huggingface \
        fwdslsh/vibevoice:latest "$@" | \
      "$PLAYER" - >/dev/null 2>&1 || true
      ;;
    play)
      docker run "${GPU_FLAG[@]}" --rm -i \
        -v "$HF_CACHE":/root/.cache/huggingface \
        fwdslsh/vibevoice:latest "$@" | \
      play - >/dev/null 2>&1 || true
      ;;
  esac
else
  # No player found, just output to stdout
  docker run "${GPU_FLAG[@]}" --rm -i \
    -v "$HF_CACHE":/root/.cache/huggingface \
    fwdslsh/vibevoice:latest "$@"
fi