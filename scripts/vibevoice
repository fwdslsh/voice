#!/usr/bin/env bash
set -euo pipefail

# Decide if GPU is available (Linux + NVIDIA)
GPU_FLAG=()
if command -v nvidia-smi >/dev/null 2>&1; then
  GPU_FLAG=(--gpus all)
fi

# Parse args to check if user wants to save to file
OUTFILE=""
DOCKER_ARGS=()
while [[ $# -gt 0 ]]; do
  case $1 in
    --outfile)
      OUTFILE="$2"
      DOCKER_ARGS+=("$1" "$2")
      shift 2
      ;;
    *)
      DOCKER_ARGS+=("$1")
      shift
      ;;
  esac
done

# If user specified outfile, run container and save to that file
if [[ -n "$OUTFILE" ]]; then
  # Use absolute path
  OUTFILE="$(realpath "$OUTFILE")"
  OUTDIR="$(dirname "$OUTFILE")"
  OUTNAME="$(basename "$OUTFILE")"
  
  # Create directory for output file if needed
  mkdir -p "$OUTDIR"
  
  # shared HF cache speeds up repeated runs
  HF_CACHE="${HOME}/.cache/huggingface"
  mkdir -p "$HF_CACHE"
  
  # Update docker args to write to /out/filename
  MODIFIED_ARGS=()
  for arg in "${DOCKER_ARGS[@]}"; do
    if [[ "$arg" == "$OUTFILE" ]]; then
      MODIFIED_ARGS+=("/out/$OUTNAME")
    else
      MODIFIED_ARGS+=("$arg")
    fi
  done
  
  docker run "${GPU_FLAG[@]}" --rm -i \
    -v "$HF_CACHE":/root/.cache/huggingface \
    -v "$OUTDIR":/out \
    vibevoice:local "${MODIFIED_ARGS[@]}"
  
  echo "[info] WAV saved to: $OUTFILE"
  exit 0
fi

# Default behavior: stream to audio player
# Pick a host audio player in order of preference
pick_player() {
  for p in ffplay afplay aplay paplay play; do
    if command -v "$p" >/dev/null 2>&1; then
      echo "$p"
      return 0
    fi
  done
  echo ""
  return 1
}

PLAYER="$(pick_player || true)"
if [[ -z "${PLAYER}" ]]; then
  echo "[note] No audio player found on host (ffplay/afplay/aplay/paplay/play). Outputting WAV to stdout."
fi

# shared HF cache speeds up repeated runs
HF_CACHE="${HOME}/.cache/huggingface"
mkdir -p "$HF_CACHE"

# run container and pipe output
if [[ -n "${PLAYER}" ]]; then
  case "$PLAYER" in
    ffplay)
      docker run "${GPU_FLAG[@]}" --rm -i \
        -v "$HF_CACHE":/root/.cache/huggingface \
        vibevoice:local "${DOCKER_ARGS[@]}" | \
      ffplay -nodisp -autoexit - >/dev/null 2>&1 || true
      ;;
    afplay)
      # afplay needs a file, so we'll use a temp file
      TMPFILE="$(mktemp --suffix=.wav)"
      cleanup_tmp() { rm -f "$TMPFILE"; }
      trap cleanup_tmp EXIT
      
      docker run "${GPU_FLAG[@]}" --rm -i \
        -v "$HF_CACHE":/root/.cache/huggingface \
        vibevoice:local "${DOCKER_ARGS[@]}" > "$TMPFILE"
      afplay "$TMPFILE" || true
      ;;
    aplay|paplay)
      docker run "${GPU_FLAG[@]}" --rm -i \
        -v "$HF_CACHE":/root/.cache/huggingface \
        vibevoice:local "${DOCKER_ARGS[@]}" | \
      "$PLAYER" - >/dev/null 2>&1 || true
      ;;
    play)
      docker run "${GPU_FLAG[@]}" --rm -i \
        -v "$HF_CACHE":/root/.cache/huggingface \
        vibevoice:local "${DOCKER_ARGS[@]}" | \
      play - >/dev/null 2>&1 || true
      ;;
  esac
else
  # No player found, just output to stdout
  docker run "${GPU_FLAG[@]}" --rm -i \
    -v "$HF_CACHE":/root/.cache/huggingface \
    vibevoice:local "${DOCKER_ARGS[@]}"
fi